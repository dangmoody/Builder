v0.2.0, <INSERT RELEASE DATE HERE>:

* If no input file is specified, Builder will now tell you that you can pass -h as a command line arg to get help on how to use Builder.
* Instead of .build_info only containing all source files used in the build (and all the header files we can find), we now serialize out all members of BuilderOptions and, if it exists, the visual studio solution/projects you generated.

----------------------------------------------------------------

v0.1.1, 12/10/2024:

* Builder will no longer crash if it can't resolve a source file to include in the build and will instead show you an error saying it can't resolve the source file(s) and exit.
* Fixed another ABI incompatibility issue between Builder and the user config DLL that caused a crash when trying to write to any of the std::vectors.
* Fixed a bunch of things that were broken for generating Visual Studio project files after removing our dependency to Core.
* VisualStudioSolution::path is now relative to the source file that implements set_visual_studio_options, as the documentation says.

----------------------------------------------------------------

v0.1.0, 11/10/2024:

* Add set_builder_options( BuilderOptions* ), which lets you customize your builds how you want via C++.
* Add --nuke command line argument that will delete all the contents of a folder, followed by the folder itself.
* Add --config=<config> command line argument which lets you specify your own configs.
	* BuilderOptions::config gets set to this, so you can use it to configure your builds based off config.
* Add on_pre_build( BuilderOptions* ) and on_post_build( BuilderOptions* ), which run just before and just after your build, respectively.
* Add Visual Studio Solution and Project generation.
	* This is done by using the entry point set_visual_studio_options( VisualStudioOptions* ).
* Expose all optimisation levels that Clang provides via BuilderOptions, instead of just a boolean toggling them on/off.
* Detect if a specific version of Clang is installed.  If it's not, then download and install it automatically.
	* This doesn't override any pre-existing version of Clang, nor does this set any environment variables.
* Set default output path to the same folder as the source file you are building.
* Set default binary name to the same as the source file except the file ends with .exe instead of .cpp.
* Remove Clang-specific syntax from defines, additional_includes, additional_lib_paths, and additional_libs in BuilderOptions.
	* Can't remove it from the ignore_warnings just yet.  That list probably needs to be moved into a Clang-specific set of options.