v0.4.0, 18/12/2024:

* Added BuildConfig::depends_on.
	* This allows you to specify build dependencies.  Builder will recursively build everything inside BuildConfig::depends_on first.
	* Because of this, all of your old .build_info files will not work with this version of Builder.  Delete those beforehand.
* Added VisualStudioConfig::name, which just lets you set the name of the config as it will appear in Visual Studio.
	* This is because BuildConfig::name MUST be unique, so you then have to tell Visual Studio which of your BuildConfigs are classified as what in the eyes of Visual Studio.
* Added error logging for all file operations.
	* Some users have reported errors coming from Builder when it attempts to create the binary folder they specify, for instance, but it works fine on others and the problem isn't obvious yet.  We need more logging.
* Made some improvements for Visual Studio support:
	* The user-requested the Visual Studio Solution path is now created for you automatically.
	* Header files and .inl files are now added to the solution.
	* Add all files in subfolders, recursively.
	* Changed the way you tell Builder what files to add to your Visual Studio Solution:
		* VisualStudioProject::source_files has been replaced for VisualStudioProject::code_folders and VisualStudioProject::file_extensions.
		* VisualStudioProject::code_folders tells Builder what folders your code lives in (without any search filters).
		* VisualStudioProject::file_extensions tells Builder what file types you want to include in your project (across any of the folders inside VisualStudioProject::code_folders).
* Fixed a bug where building via a .build_info file didn't call the on_pre_build() or on_post_build() callbacks.
* Rebuild skipping:
	* Checking the timestamps of each file we know about seems to have been completely broken at some point.  It's now been fixed.
	* Add check for if the binary itself exists.  It's possible to delete the binary after a build without touching any of the source files.
* The user config build step will now only happen if doing a build from a C++ file or if the .dll can't be found or loaded when doing a build from a .build_info file.

----------------------------------------------------------------

v0.3.0, 02/11/2024:

* All the members of BuilderOptions have been moved to a new struct called "BuildConfig".
	* This is because BuilderOptions refers to more than just compiling code now.
	* See builder.h for what BuilderOptions now contains, but you'll see that things have been made much simpler.
	* Additionally, BuilderOptions::config got renamed to BuildConfig::name.
* The entry point set_visual_studio_options() no longer exists.  Instead, all Visual Studio solution generation code must now be written inside set_builder_options().
	* If you want to generate a solution now, set BuilderOptions::generate_solution to true, and fill out all the members of BuilderOptions::solution like you were doing before.
	* This is much better because you don't need to duplicate half the code that was inside set_builder_options() to begin with, and you can just use the BuildConfigs that you had already written to generate your Visual Studio solutions and projects.
	* As a result of this, the functions add_visual_studio_project() and add_visual_studio_config() were removed because they're not needed.
* BuildConfig::name no longer gets set via the --config command line argument.
	* Instead, Builder will check the config set via the command line against the names of all the BuildConfigs you added to BuilderOptions::configs.  If Builder matches one of the names of the configs to the command line input, then it will use that one when compiling.  Otherwise it will throw an error saying it can't find this config with this name.  They MUST match exactly (case sensitive).
	* With this change, all of the members inside BuildConfig can now be set by you and there no more special rules for which members you can and can't write to.  This makes things much simpler.

----------------------------------------------------------------

v0.2.0, 26/10/2024:

* .build_info files have been massively refactored:
	* .build_info files are now binary files.
	* Instead of .build_info only containing all source files used in the build (and all the header files we can find) we now serialize all members of BuilderOptions and, if it exists, the Visual Studio solution/projects you generated.
	* As a result of these changes, all .build_info files were made with an older version of Builder will no longer work.
	* When generating a Visual Studio solution, a .build_info file will now get generated (this should've been happening before, but it wasn't).
	* The default values of BuilderOptions are now correctly serialized into the .build_info file that gets generated when you generate a Visual Studio solution.
* Added BuilderOptions::warnings_as_errors.
* Added helper functions add_visual_studio_project( VisualStudioSolution* ) and add_visual_studio_config( VisualStudioProject* ) inside builder.h to help with generating Visual Studio solutions.
* Added -v and --verbose command line arguments, which output more things.
	* This will be useful for helping diagnose problems, mostly.
	* This doesn't output a whole lot extra right now, but that will change in future.
* If no input file is specified, Builder will now tell you that you can pass -h as a command line arg to get help on how to use Builder.
* Builder will now fatal error if it can't create the binary folder that you specify inside set_builder_options().
* Better, more helpful information is displayed when you use the help command line argument.
* Intermediate files no longer contain the file extension of the input file in the output binary file name when the input file is a C++ code file.
* Make things clearer in the README.
* Removed VisualStudioConfig::build_source_file.
	* We don't generate a separate source file every time we generate a Visual Studio project config anymore because we can now use the build info that gets generated with the solution instead, so this became redundant.
* on_pre_build() and on_post_build() no longer have BuilderOptions* as a parameter, since it's not known how likely people are to need access to BuilderOptions in those functions, currently.
	* This is the only time I see a change like this happening.  I should have thought longer about how users are going to use these entry points, what they were going to use them for, and what data they actually needed.
	* If it turns out that users actually need BuilderOptions here then I'll put it back, but I want to know for certain that they need it before I do that.

----------------------------------------------------------------

v0.1.1, 12/10/2024:

* Builder will no longer crash if it can't resolve a source file to include in the build and will instead show you an error saying it can't resolve the source file(s) and exit.
* Fixed another ABI incompatibility issue between Builder and the user config DLL that caused a crash when trying to write to any of the std::vectors.
* Fixed a bunch of things that were broken for generating Visual Studio project files after removing our dependency to Core.
* VisualStudioSolution::path is now relative to the source file that implements set_visual_studio_options, as the documentation says.

----------------------------------------------------------------

v0.1.0, 11/10/2024:

* Add set_builder_options( BuilderOptions* ), which lets you customize your builds how you want via C++.
* Add --nuke command line argument that will delete all the contents of a folder, followed by the folder itself.
* Add --config=<config> command line argument which lets you specify your own configs.
	* BuilderOptions::config gets set to this, so you can use it to configure your builds based off config.
* Add on_pre_build( BuilderOptions* ) and on_post_build( BuilderOptions* ), which run just before and just after your build, respectively.
* Add Visual Studio Solution and Project generation.
	* This is done by using the entry point set_visual_studio_options( VisualStudioOptions* ).
* Expose all optimisation levels that Clang provides via BuilderOptions, instead of just a boolean toggling them on/off.
* Detect if a specific version of Clang is installed.  If it's not, then download and install it automatically.
	* This doesn't override any pre-existing version of Clang, nor does this set any environment variables.
* Set default output path to the same folder as the source file you are building.
* Set default binary name to the same as the source file except the file ends with .exe instead of .cpp.
* Remove Clang-specific syntax from defines, additional_includes, additional_lib_paths, and additional_libs in BuilderOptions.
	* Can't remove it from the ignore_warnings just yet.  That list probably needs to be moved into a Clang-specific set of options.