/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

// float4
// Performs a quaternion multiplication against the given scalar.
HLML_INLINE float4 quat_mul( const float4& lhs, const float rhs )
{
	float scalar = lhs.w * rhs;
	float3 imaginary = { lhs.x, lhs.y, lhs.z };
	imaginary *= rhs;
	return HLML_CONSTRUCT( float4 ) { imaginary.x, imaginary.y, imaginary.z, scalar };
}

// Performs a quaternion multiplication against the other quaternion.
HLML_INLINE float4 quat_mul( const float4& lhs, const float4& rhs )
{
	float4 quat;
	quat.x =  lhs.x * rhs.w + lhs.y * rhs.z - lhs.z * rhs.y + lhs.w * rhs.x;
	quat.y = -lhs.x * rhs.z + lhs.y * rhs.w + lhs.z * rhs.x + lhs.w * rhs.y;
	quat.z =  lhs.x * rhs.y - lhs.y * rhs.x + lhs.z * rhs.w + lhs.w * rhs.z;
	quat.w = -lhs.x * rhs.x - lhs.y * rhs.y - lhs.z * rhs.z + lhs.w * rhs.w;
	return quat;
}

// Returns the magnitude of the quaternion.
HLML_INLINE float quat_length( const float4& quat )
{
	return sqrtf( ( quat.x * quat.x ) + ( quat.y * quat.y ) + ( quat.z * quat.z ) + ( quat.w * quat.w ) );
}

// Normalizes the quaternion.
HLML_INLINE float4 quat_normalize( const float4& quat )
{
	float3 normV = { quat.x, quat.y, quat.z };
	float normS = quat.w;
	float mag = quat_length( quat );
	if ( mag >= 0.0f )
	{
		float magInverse = 1.0f / mag;
		normV = normV * magInverse;
		normS *= magInverse;
	}
	return HLML_CONSTRUCT( float4 ) { normV.x, normV.y, normV.z, normS };
}

// Returns the conjugate of the quaternion.
HLML_INLINE float4 quat_conjugate( const float4& quat )
{
	return HLML_CONSTRUCT( float4 )
	{
		( quat.x * ( -1.0f ) ),
		( quat.y * ( -1.0f ) ),
		( quat.z * ( -1.0f ) ),
		quat.w
	};
}

// Returns the inverse of the quaternion.
HLML_INLINE float4 quat_inverse( const float4& quat )
{
	float magnitude = quat_length( quat );
	magnitude *= magnitude;
	magnitude = 1.0f / magnitude;
	float4 conjugate = quat_conjugate( quat );
	float scalar = conjugate.w * magnitude;
	float3 imaginary = HLML_CONSTRUCT( float3 ) { conjugate.x * magnitude, conjugate.y * magnitude, conjugate.z * magnitude };
	return HLML_CONSTRUCT( float4 ) { imaginary.x, imaginary.y, imaginary.z, scalar };
}

// Performs a rotation on the quaternion by the given axis-angle and angle (in radians).
HLML_INLINE float3 quat_rotate( const float4& vect, const float angle, const float3& axis )
{
	float4 pureQuat = HLML_CONSTRUCT( float4 ) { vect.x, vect.y, vect.z, 0.0f };
	float3 normalizedAxis = axis;
	normalize( normalizedAxis );
	float4 realQuat = HLML_CONSTRUCT( float4 ) { normalizedAxis.x, normalizedAxis.y, normalizedAxis.z, angle };

	float3 imaginary = { realQuat.x, realQuat.y, realQuat.z };
	float3 normalizedImaginary = imaginary;
	normalize( normalizedImaginary );
	float unitNormScalar = cosf( realQuat.w * 0.5f );
	float sinResult = sinf( realQuat.w * 0.5f );
	float3 unitNormImaginary = normalizedImaginary * sinResult;
	float4 unitNormQuat = { unitNormImaginary.x, unitNormImaginary.y, unitNormImaginary.z, unitNormScalar };

	float4 inverseQuat = quat_inverse( unitNormQuat );
	float4 rotatedVector = quat_mul( unitNormQuat, pureQuat );
	rotatedVector = quat_mul( rotatedVector, inverseQuat );
	return HLML_CONSTRUCT( float3 ) { rotatedVector.x, rotatedVector.y, rotatedVector.z };
}

// Returns a linearly interpolated float4 quaternion between 'a' and 'b' where 'percent' is the percentage (between 0 and 1) to interpolate by.
HLML_INLINE float4 quat_lerp( const float4& lhs, const float4& rhs, const float percent )
{
	float4 quat;
	float t = 1.0f - percent;
	quat.x = t * lhs.x + percent * rhs.x;
	quat.y = t * lhs.y + percent * rhs.y;
	quat.z = t * lhs.z + percent * rhs.z;
	quat.w = t * lhs.w + percent * rhs.w;
	return quat;
}

// Returns a spherically interpolated float4 between 'a' and 'b' where 'percent' is the percentage (between 0 and 1) to interpolate by.
HLML_INLINE float4 quat_slerp( const float4& lhs, const float4& rhs, const float percent )
{
	float4 quat;
	float t = 1.0f - percent;
	float cosTheta = ( lhs.x * rhs.x ) + ( lhs.y * rhs.y ) + ( lhs.z * rhs.z ) + ( lhs.w * rhs.w );
	if ( cosTheta >= 1.0f )
	{
		return HLML_CONSTRUCT( float4 ) { lhs.x, lhs.y, lhs.z, lhs.w };
	}
	float theta = acosf( cosTheta );
	float sn = sqrtf( 1.0f - cosTheta * cosTheta );
	float Wa = sinf( percent * theta ) / sn;
	float Wb = sinf( t * theta ) / sn;
	quat.x = Wa * rhs.x + Wb * lhs.x;
	quat.y = Wa * rhs.y + Wb * lhs.y;
	quat.z = Wa * rhs.z + Wb * lhs.z;
	quat.w = Wa * rhs.w + Wb * lhs.w;
	return quat;
}

// Converts the quaternion into a rotation matrix and returns the result.
HLML_INLINE float4x4 quat_to_rotation_matrix( const float4& quat )
{
	return HLML_CONSTRUCT( float4x4 )
	{
		1.0f - ( 2.0f * ( quat.y * quat.y ) ) - ( 2.0f * ( quat.z * quat.z ) ),
		( 2.0f * ( quat.x * quat.y ) ) - ( 2.0f * ( quat.w * quat.z ) ),
		( 2.0f * ( quat.x * quat.z ) ) + ( 2.0f * ( quat.w * quat.y ) ),
		0.0f,

		( 2.0f * ( quat.x * quat.y ) ) + ( 2.0f * ( quat.w * quat.z ) ),
		1.0f - ( 2.0f * ( quat.x * quat.x ) ) - ( 2.0f * ( quat.z * quat.z ) ),
		( 2.0f * ( quat.y * quat.z ) ) - ( 2.0f * ( quat.w * quat.x ) ),
		0.0f,

		( 2.0f * ( quat.x * quat.z ) ) - ( 2.0f * ( quat.w * quat.y ) ),
		( 2.0f * ( quat.y * quat.z ) ) + ( 2.0f * ( quat.w * quat.x ) ),
		1.0f - ( 2.0f * ( quat.x * quat.x ) ) - ( 2.0f * ( quat.y * quat.y ) ),
		0.0f,

		0.0f,
		0.0f,
		0.0f,
		1.0f
	};
}

// double4
// Performs a quaternion multiplication against the given scalar.
HLML_INLINE double4 quat_mul( const double4& lhs, const double rhs )
{
	double scalar = lhs.w * rhs;
	double3 imaginary = { lhs.x, lhs.y, lhs.z };
	imaginary *= rhs;
	return HLML_CONSTRUCT( double4 ) { imaginary.x, imaginary.y, imaginary.z, scalar };
}

// Performs a quaternion multiplication against the other quaternion.
HLML_INLINE double4 quat_mul( const double4& lhs, const double4& rhs )
{
	double4 quat;
	quat.x =  lhs.x * rhs.w + lhs.y * rhs.z - lhs.z * rhs.y + lhs.w * rhs.x;
	quat.y = -lhs.x * rhs.z + lhs.y * rhs.w + lhs.z * rhs.x + lhs.w * rhs.y;
	quat.z =  lhs.x * rhs.y - lhs.y * rhs.x + lhs.z * rhs.w + lhs.w * rhs.z;
	quat.w = -lhs.x * rhs.x - lhs.y * rhs.y - lhs.z * rhs.z + lhs.w * rhs.w;
	return quat;
}

// Returns the magnitude of the quaternion.
HLML_INLINE double quat_length( const double4& quat )
{
	return sqrt( ( quat.x * quat.x ) + ( quat.y * quat.y ) + ( quat.z * quat.z ) + ( quat.w * quat.w ) );
}

// Normalizes the quaternion.
HLML_INLINE double4 quat_normalize( const double4& quat )
{
	double3 normV = { quat.x, quat.y, quat.z };
	double normS = quat.w;
	double mag = quat_length( quat );
	if ( mag >= 0.0 )
	{
		double magInverse = 1.0 / mag;
		normV = normV * magInverse;
		normS *= magInverse;
	}
	return HLML_CONSTRUCT( double4 ) { normV.x, normV.y, normV.z, normS };
}

// Returns the conjugate of the quaternion.
HLML_INLINE double4 quat_conjugate( const double4& quat )
{
	return HLML_CONSTRUCT( double4 )
	{
		( quat.x * ( -1.0 ) ),
		( quat.y * ( -1.0 ) ),
		( quat.z * ( -1.0 ) ),
		quat.w
	};
}

// Returns the inverse of the quaternion.
HLML_INLINE double4 quat_inverse( const double4& quat )
{
	double magnitude = quat_length( quat );
	magnitude *= magnitude;
	magnitude = 1.0 / magnitude;
	double4 conjugate = quat_conjugate( quat );
	double scalar = conjugate.w * magnitude;
	double3 imaginary = HLML_CONSTRUCT( double3 ) { conjugate.x * magnitude, conjugate.y * magnitude, conjugate.z * magnitude };
	return HLML_CONSTRUCT( double4 ) { imaginary.x, imaginary.y, imaginary.z, scalar };
}

// Performs a rotation on the quaternion by the given axis-angle and angle (in radians).
HLML_INLINE double3 quat_rotate( const double4& vect, const double angle, const double3& axis )
{
	double4 pureQuat = HLML_CONSTRUCT( double4 ) { vect.x, vect.y, vect.z, 0.0 };
	double3 normalizedAxis = axis;
	normalize( normalizedAxis );
	double4 realQuat = HLML_CONSTRUCT( double4 ) { normalizedAxis.x, normalizedAxis.y, normalizedAxis.z, angle };

	double3 imaginary = { realQuat.x, realQuat.y, realQuat.z };
	double3 normalizedImaginary = imaginary;
	normalize( normalizedImaginary );
	double unitNormScalar = cos( realQuat.w * 0.5 );
	double sinResult = sin( realQuat.w * 0.5 );
	double3 unitNormImaginary = normalizedImaginary * sinResult;
	double4 unitNormQuat = { unitNormImaginary.x, unitNormImaginary.y, unitNormImaginary.z, unitNormScalar };

	double4 inverseQuat = quat_inverse( unitNormQuat );
	double4 rotatedVector = quat_mul( unitNormQuat, pureQuat );
	rotatedVector = quat_mul( rotatedVector, inverseQuat );
	return HLML_CONSTRUCT( double3 ) { rotatedVector.x, rotatedVector.y, rotatedVector.z };
}

// Returns a linearly interpolated float4 quaternion between 'a' and 'b' where 'percent' is the percentage (between 0 and 1) to interpolate by.
HLML_INLINE double4 quat_lerp( const double4& lhs, const double4& rhs, const double percent )
{
	double4 quat;
	double t = 1.0 - percent;
	quat.x = t * lhs.x + percent * rhs.x;
	quat.y = t * lhs.y + percent * rhs.y;
	quat.z = t * lhs.z + percent * rhs.z;
	quat.w = t * lhs.w + percent * rhs.w;
	return quat;
}

// Returns a spherically interpolated float4 between 'a' and 'b' where 'percent' is the percentage (between 0 and 1) to interpolate by.
HLML_INLINE double4 quat_slerp( const double4& lhs, const double4& rhs, const double percent )
{
	double4 quat;
	double t = 1.0 - percent;
	double cosTheta = ( lhs.x * rhs.x ) + ( lhs.y * rhs.y ) + ( lhs.z * rhs.z ) + ( lhs.w * rhs.w );
	if ( cosTheta >= 1.0 )
	{
		return HLML_CONSTRUCT( double4 ) { lhs.x, lhs.y, lhs.z, lhs.w };
	}
	double theta = acos( cosTheta );
	double sn = sqrt( 1.0 - cosTheta * cosTheta );
	double Wa = sin( percent * theta ) / sn;
	double Wb = sin( t * theta ) / sn;
	quat.x = Wa * rhs.x + Wb * lhs.x;
	quat.y = Wa * rhs.y + Wb * lhs.y;
	quat.z = Wa * rhs.z + Wb * lhs.z;
	quat.w = Wa * rhs.w + Wb * lhs.w;
	return quat;
}

// Converts the quaternion into a rotation matrix and returns the result.
HLML_INLINE double4x4 quat_to_rotation_matrix( const double4& quat )
{
	return HLML_CONSTRUCT( double4x4 )
	{
		1.0 - ( 2.0 * ( quat.y * quat.y ) ) - ( 2.0 * ( quat.z * quat.z ) ),
		( 2.0 * ( quat.x * quat.y ) ) - ( 2.0 * ( quat.w * quat.z ) ),
		( 2.0 * ( quat.x * quat.z ) ) + ( 2.0 * ( quat.w * quat.y ) ),
		0.0,

		( 2.0 * ( quat.x * quat.y ) ) + ( 2.0 * ( quat.w * quat.z ) ),
		1.0 - ( 2.0 * ( quat.x * quat.x ) ) - ( 2.0 * ( quat.z * quat.z ) ),
		( 2.0 * ( quat.y * quat.z ) ) - ( 2.0 * ( quat.w * quat.x ) ),
		0.0,

		( 2.0 * ( quat.x * quat.z ) ) - ( 2.0 * ( quat.w * quat.y ) ),
		( 2.0 * ( quat.y * quat.z ) ) + ( 2.0 * ( quat.w * quat.x ) ),
		1.0 - ( 2.0 * ( quat.x * quat.x ) ) - ( 2.0 * ( quat.y * quat.y ) ),
		0.0,

		0.0,
		0.0,
		0.0,
		1.0
	};
}

