v0.7.0, <RELEASE DATE HERE>:

* Added better support for wildcard file resolution so now it works more like Linux.
	* Before, doing something like src/*.cpp would resolve ALL .cpp files in the src folder as well any found in subfolders.  Now it will not resolve files in subfolders.
	* If you want subfolder file resolution you must follow the linux convention (E.G.: src/**/*.cpp).
* Added BuildConfig::warning_levels.
	* Before we used to add all Clang warning levels to builds by default, but now we enable none of them by default.
	* This is to let people decide how strict they want the compiler to be (we already offered options like this with BuildConfig::warnings_as_errors).
	* Clang can be quite strict as it is, so let's not annoy people unnecessarily.
* Added some more timing metrics when doing builds.
	* We now time more than just the total time taken to run Builder.exe from start to finish.
	* We're doing this to get a better idea of where build time is being spent when using Builder and therefore how we can make Builder faster.
	* We now also log:
		* User config build.
		* Visual Studio solution generation time.
		* The time taken to just run the compiler subprocess.
		* .build_info file read and write time.
		* Dependency file read time.
		* Maybe more, in future.
* Added -Wno-nontrivial-memcall to the list of default ignored warnings.
	* This warning seems to fire every time we do pointer arithmetic, which is tedious.
* Added some more error checking that we weren't doing, but should have.
* Moved some extraneous logging when generating a Visual Studio solution to only show when verbose logging (-v) argument is specified.
* Hide unecessary warning that gets fired when doing a hashmap lookup.

----------------------------------------------------------------

v0.6.4, 07/04/2025:

* Reduced build times!
	* #include dependency resolution is now done through Clang's -MD arg, which is faster than the custom solution Builder had for this.
	* This will produce .d files that get put into the .builder folder.
* Fixed Builder hanging if a Visual Studio project had multiple folders in its name.
* Fixed BuildConfig::warnings_as_errors not being read from/written to the .build_info file.
* Better and more accurate documentation.
* Moved Clang version into builder.h so that users can see and check what version of Clang Builder uses, if they need to.
* Refactored a bunch of things internally that will mean nothing to the end-user, but internally things are a lot cleaner now.

----------------------------------------------------------------

v0.6.3, 08/03/2025:

* Old Visual Studio files now get deleted when generating a Solution.
	* If a user renamed a project, for example, then the project under the old name would get kept around causing subtle storage bloat.  This change fixes that.

----------------------------------------------------------------

v0.6.2, 02/03/2025:

* Change all std::vector<const char*> in builder.h to std::vector<std::string>.
	* It's totally feasible that users want to set those fields dynamically, so that necessitated this change.
* Log when writing to .build_info file.

----------------------------------------------------------------

v0.6.1, 28/02/2025:

* Fixed Visual Studio filters still not showing correctly.
* Fix .sln files containing GlobalSection(NestedProjects) even if no project folders were requested.

----------------------------------------------------------------

v0.6.0, 23/02/2025:

* Visual Studio:
	* Added support for project folders.  Projects that now have slashes in their names will cause Builder to put that project inside a project folder in the Solution Explorer.
		* For example: If you set a VisualStudioProject::name to be "games/shooter" then Builder will create a project called "shooter" that is inside a project folder called "games".
	* Fixed top-level files and some subfolders inside VisualStudioProject::code_folders not getting added to the Visual Studio project.
	* Fixed IntelliSense not correctly showing additional include and library paths.
* on_pre_build() and on_post_build() now always use the path of the input file as the CWD.
* Refactored the system that reads and writes .build_info files.
	* The old way used to be one system for reading the files and another for writing, but now it's one unified system that does both.
	* This new system works with pre-existing .build_info files.

----------------------------------------------------------------

v0.5.8, 09/02/2025:

* Fixed the way Builder checks for duplicate BuildConfigs when calling add_build_config().
	* Builder now hashes the BuildConfig and checks the hashes when adding a new BuildConfig in order to determine if it's a duplicate or not.
	* You can find this code at the bottom of builder.h.  It's not meant to be used by users (as the comment shows).
* Refactored rebuild skipping.  It's more robust now.

----------------------------------------------------------------

v0.5.7, 08/02/2025:

* Throw an error if multiple BuildConfigs have an empty name.
* Throw an error if specifying a config whilst also trying to generate a Visual Studio solution.
	* Having Builder actually do both of those things feels hacky so I'm deliberately not allowing it to do both right now.
* Input file path is no longer allocated via temp storage, which now gets reset.
* Visual Studio files are now written via one single call to file_write_entire(), as opposed to lots of file_write*() calls.
	* More stable this way and faster too!

----------------------------------------------------------------

v0.5.6, 02/02/2025:

* Fixed temp storage overflows which caused Builder to crash.
* Fixed builds incorrectly being skipped if an old version of the binary with the same name existed.

----------------------------------------------------------------

v0.5.5, 21/01/2025:

* Builder now serializes it's version number into all .build_info files.
	* This is to detect whether or not we need to rebuild between new versions of builder.
	* As a result of this, all old .build_info files are out of date and will need to be deleted before using this version.
* Fixed Visual Studio filters not showing all the files in their correct folder/subfolder.

----------------------------------------------------------------

v0.5.4, 17/01/2025:

* Fixed builds getting skipped if Builder can't find the .build_info file or if the expected .build_info file name changes.
* Fixed path from Visual Studio solution to Builder being null if the input file didn't also contain a path.

----------------------------------------------------------------

v0.5.3, 07/01/2025:

* Builder now officially ships under the MIT license.
	* I forgot to change the license when I made Builder publicly available - whoops!

----------------------------------------------------------------

v0.5.2, 05/01/2025:

* Fixed a crash when sometimes trying to generate a .sln file.
* Fixed a crash when sometimes trying to build from Visual Studio.
* Fixed the binary folder being called "null" when the build source file doesn't contain a path.
* Fixed "default" build config not getting written to .build_info file in a default build.
* Fixed source files sometimes not getting resolved when the build source file contains a path.
* Fixed duplicate files sometimes not getting treated as duplicates when tracking them in the .build_info file.
* Fixed source file paths sometimes being null when serializing a .build_info file.
* Better output in the console when generating a Visual Studio solution.

----------------------------------------------------------------

v0.5.1, 01/01/2025:

* Some of the documentation was out of date; can't be having that!

----------------------------------------------------------------

v0.5.0, 28/12/2024:

* BuildConfig::source_files now supports wildcards.
	* This will make adding source files to your projects a lot less tedious, since you now won't need to tell Builder about every individual new source file that you add.
* BuildConfig::additional_includes and BuildConfig::additional_lib_paths are now arrays of std::strings.
	* This was done because sometimes you want to add something to these arrays that is queried dynamically at runtime (E.G.: based off an environment variable via a call to getenv()) and the memory would otherwise get lost.
* Removed VisualStudioConfig::output_directory.
	* This only existed because Builder wasn't smart enough to figure this out for you, but it is now.
* User config build context now #defines _CRT_SECURE_NO_WARNINGS for you by default.
	* This means you can now call functions that are banned by that #define if you need to, for some reason.
* Fixed the following bugs:
	* If multiple configs are specified in the build source file but none were passed at the command line then Builder will now throw an error about this.
	* Paths to source files are now resolved properly when building from visual studio.
	* Includes that were commented out are no longer included in the .build_info file.
		* Because this include is ultimately not included in the build, Builder shouldn't care about it.  The file name/path could be wrong, and the file could not exist.
	* Files that got overwritten did not get wiped, leaving lots of trailing garbage content.

----------------------------------------------------------------

v0.4.0, 18/12/2024:

* Added BuildConfig::depends_on.
	* This allows you to specify build dependencies.  Builder will recursively build everything inside BuildConfig::depends_on first.
	* Because of this, all of your old .build_info files will not work with this version of Builder.  Delete those beforehand.
* Added VisualStudioConfig::name, which just lets you set the name of the config as it will appear in Visual Studio.
	* This is because BuildConfig::name MUST be unique, so you then have to tell Visual Studio which of your BuildConfigs are classified as what in the eyes of Visual Studio.
* Added error logging for all file operations.
	* Some users have reported errors coming from Builder when it attempts to create the binary folder they specify, for instance, but it works fine on others and the problem isn't obvious yet.  We need more logging.
* Made some improvements for Visual Studio support:
	* The user-requested the Visual Studio Solution path is now created for you automatically.
	* Header files and .inl files are now added to the solution.
	* Add all files in subfolders, recursively.
	* Changed the way you tell Builder what files to add to your Visual Studio Solution:
		* VisualStudioProject::source_files has been replaced for VisualStudioProject::code_folders and VisualStudioProject::file_extensions.
		* VisualStudioProject::code_folders tells Builder what folders your code lives in (without any search filters).
		* VisualStudioProject::file_extensions tells Builder what file types you want to include in your project (across any of the folders inside VisualStudioProject::code_folders).
* Fixed a bug where building via a .build_info file didn't call the on_pre_build() or on_post_build() callbacks.
* Rebuild skipping:
	* Checking the timestamps of each file we know about seems to have been completely broken at some point.  It's now been fixed.
	* Add check for if the binary itself exists.  It's possible to delete the binary after a build without touching any of the source files.
* The user config build step will now only happen if doing a build from a C++ file or if the .dll can't be found or loaded when doing a build from a .build_info file.

----------------------------------------------------------------

v0.3.0, 02/11/2024:

* All the members of BuilderOptions have been moved to a new struct called "BuildConfig".
	* This is because BuilderOptions refers to more than just compiling code now.
	* See builder.h for what BuilderOptions now contains, but you'll see that things have been made much simpler.
	* Additionally, BuilderOptions::config got renamed to BuildConfig::name.
* The entry point set_visual_studio_options() no longer exists.  Instead, all Visual Studio solution generation code must now be written inside set_builder_options().
	* If you want to generate a solution now, set BuilderOptions::generate_solution to true, and fill out all the members of BuilderOptions::solution like you were doing before.
	* This is much better because you don't need to duplicate half the code that was inside set_builder_options() to begin with, and you can just use the BuildConfigs that you had already written to generate your Visual Studio solutions and projects.
	* As a result of this, the functions add_visual_studio_project() and add_visual_studio_config() were removed because they're not needed.
* BuildConfig::name no longer gets set via the --config command line argument.
	* Instead, Builder will check the config set via the command line against the names of all the BuildConfigs you added to BuilderOptions::configs.  If Builder matches one of the names of the configs to the command line input, then it will use that one when compiling.  Otherwise it will throw an error saying it can't find this config with this name.  They MUST match exactly (case sensitive).
	* With this change, all of the members inside BuildConfig can now be set by you and there no more special rules for which members you can and can't write to.  This makes things much simpler.

----------------------------------------------------------------

v0.2.0, 26/10/2024:

* .build_info files have been massively refactored:
	* .build_info files are now binary files.
	* Instead of .build_info only containing all source files used in the build (and all the header files we can find) we now serialize all members of BuilderOptions and, if it exists, the Visual Studio solution/projects you generated.
	* As a result of these changes, all .build_info files were made with an older version of Builder will no longer work.
	* When generating a Visual Studio solution, a .build_info file will now get generated (this should've been happening before, but it wasn't).
	* The default values of BuilderOptions are now correctly serialized into the .build_info file that gets generated when you generate a Visual Studio solution.
* Added BuilderOptions::warnings_as_errors.
* Added helper functions add_visual_studio_project( VisualStudioSolution* ) and add_visual_studio_config( VisualStudioProject* ) inside builder.h to help with generating Visual Studio solutions.
* Added -v and --verbose command line arguments, which output more things.
	* This will be useful for helping diagnose problems, mostly.
	* This doesn't output a whole lot extra right now, but that will change in future.
* If no input file is specified, Builder will now tell you that you can pass -h as a command line arg to get help on how to use Builder.
* Builder will now fatal error if it can't create the binary folder that you specify inside set_builder_options().
* Better, more helpful information is displayed when you use the help command line argument.
* Intermediate files no longer contain the file extension of the input file in the output binary file name when the input file is a C++ code file.
* Make things clearer in the README.
* Removed VisualStudioConfig::build_source_file.
	* We don't generate a separate source file every time we generate a Visual Studio project config anymore because we can now use the build info that gets generated with the solution instead, so this became redundant.
* on_pre_build() and on_post_build() no longer have BuilderOptions* as a parameter, since it's not known how likely people are to need access to BuilderOptions in those functions, currently.
	* This is the only time I see a change like this happening.  I should have thought longer about how users are going to use these entry points, what they were going to use them for, and what data they actually needed.
	* If it turns out that users actually need BuilderOptions here then I'll put it back, but I want to know for certain that they need it before I do that.

----------------------------------------------------------------

v0.1.1, 12/10/2024:

* Builder will no longer crash if it can't resolve a source file to include in the build and will instead show you an error saying it can't resolve the source file(s) and exit.
* Fixed another ABI incompatibility issue between Builder and the user config DLL that caused a crash when trying to write to any of the std::vectors.
* Fixed a bunch of things that were broken for generating Visual Studio project files after removing our dependency to Core.
* VisualStudioSolution::path is now relative to the source file that implements set_visual_studio_options, as the documentation says.

----------------------------------------------------------------

v0.1.0, 11/10/2024:

* Add set_builder_options( BuilderOptions* ), which lets you customize your builds how you want via C++.
* Add --nuke command line argument that will delete all the contents of a folder, followed by the folder itself.
* Add --config=<config> command line argument which lets you specify your own configs.
	* BuilderOptions::config gets set to this, so you can use it to configure your builds based off config.
* Add on_pre_build( BuilderOptions* ) and on_post_build( BuilderOptions* ), which run just before and just after your build, respectively.
* Add Visual Studio Solution and Project generation.
	* This is done by using the entry point set_visual_studio_options( VisualStudioOptions* ).
* Expose all optimisation levels that Clang provides via BuilderOptions, instead of just a boolean toggling them on/off.
* Detect if a specific version of Clang is installed.  If it's not, then download and install it automatically.
	* This doesn't override any pre-existing version of Clang, nor does this set any environment variables.
* Set default output path to the same folder as the source file you are building.
* Set default binary name to the same as the source file except the file ends with .exe instead of .cpp.
* Remove Clang-specific syntax from defines, additional_includes, additional_lib_paths, and additional_libs in BuilderOptions.
	* Can't remove it from the ignore_warnings just yet.  That list probably needs to be moved into a Clang-specific set of options.
